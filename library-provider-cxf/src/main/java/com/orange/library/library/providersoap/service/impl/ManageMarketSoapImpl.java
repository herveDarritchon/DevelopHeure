package com.orange.library.library.providersoap.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import com.orange.library.library.providersoap.mapping.SoapMapper;
import com.orange.library.library.application.ManageMarket;
import com.orange.library.library.model.MarketBean;
import com.orange.library.library.providersoap.exception.InvalidMarketError;
import com.orange.library.library.providersoap.exception.NotFoundError;
import com.orange.library.library.providersoap.model.MarketSoap;
import com.orange.library.library.providersoap.service.InvalidMarketErrorFault;
import com.orange.library.library.providersoap.service.ManageMarketSoap;
import com.orange.library.library.providersoap.service.NotFoundErrorFault;
import com.orange.library.library.providersoap.service.TechnicalErrorFault;
import com.orange.library.library.technicalservice.exception.InvalidMarketException;
import com.orange.library.library.technicalservice.exception.NotFoundException;
import com.orange.library.library.technicalservice.exception.TechnicalException;

/**
 * Web service implementation for market management
 * 
 * @author Clara
 * 
 */
@javax.jws.WebService(name = "ManageMarketSoap", serviceName = "ManageMarketSoapService", portName = "MarketManagement", targetNamespace = "http://www.orange.com/Interfaces/ManageMarket/v1", endpointInterface = "com.orange.library.library.providersoap.service.ManageMarketSoap")
public class ManageMarketSoapImpl implements ManageMarketSoap {

	private static final Logger log = Logger
			.getLogger(ManageMarketSoapImpl.class.getName());

	private ManageMarket manageMarket;

	private SoapMapper mapper;

	/**
	 * dependency injection
	 * 
	 * @param mapper
	 *            dozer mapping
	 */
	public void setMapper(SoapMapper mapper) {
		this.mapper = mapper;
	}

	/**
	 * dependency injection
	 * 
	 * @param manageMarket
	 *            application layer market manager
	 */
	public void setManageMarket(ManageMarket manageMarket) {
		this.manageMarket = manageMarket;
	}

	/**
	 * market modification
	 * 
	 * @param market
	 *            a soap market generated from wsdl
	 */
	public void modifyMarket(MarketSoap market) throws InvalidMarketErrorFault, NotFoundErrorFault,
			TechnicalErrorFault {
		log.info("Executing operation modifyMarket");

		try {
			MarketBean m = new MarketBean(market.getId(), market.getName(),
					market.getDescription());

			manageMarket.modifyMarket(m);

		} catch (TechnicalException e) {
			// maps to TechnicalErrorFault
			throw mapper.map(e);
		} catch (NotFoundException e) {
			// map to corresponding Fault
			throw (NotFoundErrorFault) mapper.map(e,
					NotFoundErrorFault.class, NotFoundError.class);
		} catch (InvalidMarketException e) {
			// map to corresponding Fault
			throw (InvalidMarketErrorFault) mapper.map(e,
					InvalidMarketErrorFault.class, InvalidMarketError.class);
		}
	}

	/**
	 * market finder
	 * 
	 * @return a list of market
	 */
	public java.util.List<MarketSoap> findAllMarkets()
			throws NotFoundErrorFault, TechnicalErrorFault {
		log.info("Executing operation findAllMarkets");
		try {

			List<MarketSoap> listOfMarket = new ArrayList<MarketSoap>();

			Map<Integer, MarketBean> mapOfMarketBean = manageMarket
					.findAllMarkets();

			for (MarketBean bean : mapOfMarketBean.values()) {
				listOfMarket.add(mapper.map(bean, MarketSoap.class));
			}

			return listOfMarket;

		} catch (TechnicalException e) {
			// maps to TechnicalErrorFault
			throw mapper.map(e);
		} catch (NotFoundException e) {
			// map to corresponding Fault
			throw (NotFoundErrorFault) mapper.map(e, NotFoundErrorFault.class,
					NotFoundError.class);
		}
	}

	/**
	 * market creation
	 * 
	 * @param market
	 *            a soap market generated from wsdl
	 */
	public void createMarket(MarketSoap market) throws InvalidMarketErrorFault,
			TechnicalErrorFault {
		log.info("Executing operation createMarket");

		try {
			//this test exists only to launch an example of a Fault when the chosen archetype is not consumer-cxf (for example : consumer-jpa).  
			//for consumer-cxf archetypes, this test could be removed, the Fault will be generated by the SoapUI mock. 
			if (market.getName().equalsIgnoreCase("badName")){
				String message = "Error creating market with name=" + market.getName();
				throw new InvalidMarketException(message);
			}

			MarketBean m = new MarketBean(market.getId(), market.getName(),
					market.getDescription());

			manageMarket.createMarket(m);

		} catch (TechnicalException e) {
			// maps to TechnicalErrorFault
			throw mapper.map(e);
		} catch (InvalidMarketException e) {
			// map to corresponding Fault
			throw (InvalidMarketErrorFault) mapper.map(e,
					InvalidMarketErrorFault.class, InvalidMarketError.class);
		}
	}

	/**
	 * market remove
	 * 
	 * @param id
	 *            the market it we want to remove
	 */
	public void deleteMarket(int id) throws InvalidMarketErrorFault,
			TechnicalErrorFault {
		log.info("Executing operation deleteMarket");
		try {

			manageMarket.deleteMarket(id);

		} catch (TechnicalException e) {
			// maps to TechnicalErrorFault
			throw mapper.map(e);
		} catch (InvalidMarketException e) {
			// map to corresponding Fault
			throw (InvalidMarketErrorFault) mapper.map(e,
					InvalidMarketErrorFault.class, InvalidMarketError.class);
		}
	}

}
